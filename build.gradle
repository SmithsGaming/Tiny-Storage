// Load the properties of this project.
ext.configFile = file "build.properties"

//Reference the properties inside the project:
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}


buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'curseforge'


version = config.mod_version.toString() + "-" + System.getenv().TRAVIS_BUILD_NUMBER.toString()
if(System.getenv().TRAVIS_BRANCH.toString().contains("Dev"))
{
    version = version + "-SNAPSHOT"
}

group= "com.timthebrick.tinystorage" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "TinyStorage"

minecraft {
    version = config.forge_version.toString() + "-" + config.minecraft_version
    runDir = "eclipse"
	replace '@VERSION@', project.version
    replace '@MC_VERSION@', version
}

dependencies {

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
	exclude '**/Thumbs.db'
}

jar {
        manifest {
        attributes 'FMLAT': 'TinyStorage_at.cfg'
    }
}

curse {
    dependsOn 'reobf'

    if (System.getenv().CURSEAPIKEY != null)
    {
        if (!config.build_mode.toString().trim().equals("SYNC"))
        {
            if ((config.build_mode.toString().trim().equals("RELEASE") && System.getenv().TRAVIS_BRANCH.toString().toLowerCase().contains("master")))
            {
                projectId = System.getenv().CURSEPROJECTID
                apiKey = System.getenv().CURSEAPIKEY
                changelog = "Check out: " + "https://github.com/" + System.getenv().TRAVIS_REPO_SLUG.toString() + "/commits/" + System.getenv().TRAVIS_BRANCH.toString() + " for all Changes."
                releaseType = "Beta"
            }
            else
            {
                logger.lifecycle("Cannot run the CurseUpload sequence. Curse upload is only done on the Development-Branch when in Debug mode, or on any other branch in Release mode. Current Branch: " + System.getenv().TRAVIS_BRANCH.toString() + " - Current build mode: " + build_mode.toString())
            }
        }
        else
        {
            logger.lifecycle("Cannot run CurseUpload sequence. We are currently synchronising Computers.")
        }
    }
    else
    {
        logger.lifecycle("Cannot run the CurseUpload sequence. No API-Key was available.")
    }
}
